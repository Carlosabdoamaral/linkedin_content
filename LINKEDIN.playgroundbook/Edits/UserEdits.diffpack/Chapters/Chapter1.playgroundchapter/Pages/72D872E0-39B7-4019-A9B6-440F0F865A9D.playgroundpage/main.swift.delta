<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*
 https://codeforces.com/problemset/problem/282/A
 The classic programming language of Bitland is Bit++. This 
 language is so peculiar and complicated.
 
 The language is that peculiar as it has exactly one 
 variable, called x. Also, there are two operations:
 
 Operation ++ increases the value of variable x by 1.
 Operation -- decreases the value of variable x by 1.
 A statement in language Bit++ is a sequence, consisting of 
 exactly one operation and one variable x. The statement is 
 written without spaces, that is, it can only contain 
 characters "+", "-", "X". Executing a statement means 
 applying the operation it contains.
 
 A programme in Bit++ is a sequence of statements, each of 
 them needs to be executed. Executing a programme means 
 executing all the statements it contains.
 
 You're given a programme in language Bit++. The initial 
 value of x is 0. Execute the programme and find its final 
 value (the value of the variable when this programme is 
 executed).
 
 Input
 The first line contains a single integer n (1 ≤ n ≤ 150) — 
 the number of statements in the programme.
 
 Next n lines contain a statement each. Each statement 
 contains exactly one operation (++ or --) and exactly one 
 variable x (denoted as letter «X»). Thus, there are no 
 empty statements. The operation and the variable can be 
 written in any order.
 
 Output
 Print a single integer — the final value of x.
 */

func bitPP(c : [String]) -&gt; Int {
    var x : Int = 0
    
    for command in c {
        if command.contains(Character("+")) {
            x += 1
        } else if command.contains(Character("-")){
            x -= 1
        }
    }
    
    return x
}

print(bitPP(c: ["++X", "--X"]))
</string>
			<key>ModifiedRange</key>
			<string>{1, 1716}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
