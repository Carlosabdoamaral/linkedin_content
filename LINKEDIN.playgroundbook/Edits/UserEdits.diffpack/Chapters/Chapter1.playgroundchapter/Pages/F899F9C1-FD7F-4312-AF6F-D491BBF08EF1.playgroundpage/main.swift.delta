<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*
 https://codeforces.com/problemset/problem/263/A
 You've got a 5 × 5 matrix, consisting of 24 zeroes and a single
 number one. Let's index the matrix rows by numbers from 1 to 
 5 from top to bottom, let's index the matrix columns by numbers from 
 1 to 5 from left to right. In one move, you are allowed 
 to apply one of the two following transformations to the matrix:
 
 Swap two neighboring matrix rows, that is, rows with indexes i and 
 i + 1 for some integer i (1 ≤ i &lt; 5).
 
 Swap two neighboring matrix columns, that is, columns with indexes j 
 and j + 1 for some integer j (1 ≤ j &lt; 5).
 
 You think that a matrix looks beautiful, if the single number one of 
 the matrix is located in its middle (in the cell that is 
 on the intersection of the third row and the third column). Count the 
 minimum number of moves needed to make the matrix beautiful.
 
 Input
 The input consists of five lines, each line contains five integers: the j-th integer in the i-th line of the input represents 
 the element of the matrix that is located on the intersection of the i-th row and the j-th column. It is guaranteed that the 
 matrix consists of 24 zeroes and a single number one.
 
 Output
 Print a single integer — the minimum number of moves needed to make the matrix beautiful.
 
 input
 0 0 0 0 0
 0 0 0 0 1
 0 0 0 0 0
 0 0 0 0 0
 0 0 0 0 0
 
 output
 3
 */

func matrix(coordinate: [Int]) {
    // VARIAVEIS
    let center : [Int] = [2,2] 
    var moves : Int = 0
    var m : [[Int]] = []
    var nM : [[Int]] = []
    var xPos : Int = coordinate[0]
    var yPos : Int = coordinate[1]
    
    // ADICIONANDO PRIMEIRAS COLUNAS E LINHAS DA MATRIZ
    for _ in 1...5 {
        m.append([0,0,0,0,0])
    }
    
    // ADICIONANDO O NÚMERO 1 ONDE O USUÁRIO PASSOU AS COORDENADAS
    for c in 1...m.count {
        if c == xPos {
            for r in 1...m.count {
                if r == yPos {
                    m[r][c] = 1
                }
            }
        }
    }
    
    // EXIBINDO A MATRIZ INICIAL
    print("START")
    for k in m {
        print(k)
    }
    
    // ALINHANDO O 1 NO CENTRO DO EIXO X
    while xPos != center[0] {
        if xPos &gt; center[0] {
            xPos -= 1
            moves += 1
        }
        
        else if xPos &lt; center[0] {
            xPos += 1
            moves += 1
        }
    }
    
    // ALINHANDO O 1 NO CENTRO DO EIXO Y
    while yPos != center[1] {
        if yPos &gt; center[1] {
            yPos -= 1
            moves += 1
        }
        
        else if yPos &lt; center[1] {
            yPos += 1
            moves += 1
        }
    }
    
    // INSERINDO O 1 NA MATRIZ
    for c in 1...m.count {
        if c == xPos {
            for r in 1...m.count {
                if r == yPos {
                    m[r][c] = 1
                }
            }
        }
    }
    
    // EXIBINDO A NOVA MATRIZ 
    print("")
    print("NEW")
    for r in m {
        print(r)
    }
    
    // EXIBINDO O NÚMERO DE MOVIMENTOS
    print("")
    print("MOVIMENTOS PARA CENTRALIZAR: \(moves)")
}

matrix(coordinate: [4,1])
</string>
			<key>ModifiedRange</key>
			<string>{0, 3088}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
